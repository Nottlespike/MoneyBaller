import time
from datetime import datetime, timedelta
from github import Github, RateLimitExceededException
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
github_token = os.getenv('GITHUB_TOKEN')
g = Github(github_token)

def get_language_percentages(repo):
    languages = repo.get_languages()
    total = sum(languages.values())
    return {lang: (count / total) * 100 for lang, count in languages.items()}

def is_likely_not_third_party(repo):
    files = [file.name for file in repo.get_contents("")]
    if "setup.py" in files or "requirements.txt" in files:
        return False
    return True

def has_recent_commits(repo, days=5):
    five_days_ago = datetime.now() - timedelta(days=days)
    default_branch = repo.default_branch
    commits = repo.get_commits(sha=default_branch, since=five_days_ago)
    return next(commits, None) is not None

def find_python_repos(min_python_percentage=70, max_contributors=2, min_stars=5, max_repos=100, recent_days=5):
    python_repos = []
    repo_count = 0

    for repo in g.get_user().get_repos():
        try:
            if repo_count >= max_repos:
                break

            # Check number of contributors
            contributors = list(repo.get_contributors())
            if len(contributors) > max_contributors:
                continue

            # Check number of stars
            if repo.stargazers_count < min_stars:
                continue

            # Check language percentages
            percentages = get_language_percentages(repo)
            if percentages.get('Python', 0) < min_python_percentage:
                continue

            # Check if it's likely not a third-party library
            if not is_likely_not_third_party(repo):
                continue

            # Check for recent commits on the default branch
            if not has_recent_commits(repo, days=recent_days):
                continue

            python_repos.append({
                'name': repo.name,
                'url': repo.html_url,
                'python_percentage': percentages.get('Python', 0),
                'contributors': len(contributors),
                'stars': repo.stargazers_count,
                'default_branch': repo.default_branch
            })

            repo_count += 1

        except RateLimitExceededException:
            # Wait until rate limit resets
            rate_limit = g.get_rate_limit()
            reset_timestamp = rate_limit.core.reset.timestamp()
            sleep_time = reset_timestamp - time.time()
            print(f"Rate limit exceeded. Sleeping for {sleep_time} seconds.")
            time.sleep(sleep_time + 1)  # Add 1 second buffer
        except Exception as e:
            print(f"Error processing repo {repo.name}: {str(e)}")

    return python_repos

# Usage
repos = find_python_repos(min_python_percentage=70, max_contributors=2, min_stars=5, max_repos=100, recent_days=5)
for repo in repos:
    print(f"Repository: {repo['name']}")
    print(f"URL: {repo['url']}")
    print(f"Python Percentage: {repo['python_percentage']:.2f}%")
    print(f"Number of Contributors: {repo['contributors']}")
    print(f"Number of Stars: {repo['stars']}")
    print(f"Default Branch: {repo['default_branch']}")
    print("---")